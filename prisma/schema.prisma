// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String    @id @default(cuid())
  name           String?
  email          String?   @unique
  emailVerified  DateTime?
  hashedPassword String?
  image          String?
  accounts       Account[]
  sessions       Session[]

  church_list Church[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum PublishStatus {
  DRAFT
  PUBLISHED
  INACTIVE
}

// CHURCH SCHEMA
model Church {
  id              String @id @default(cuid())
  name            String
  logo            String
  welcome_message String
  slug            String

  region   String
  province String
  city     String
  barangay String
  street   String

  full_address String

  status PublishStatus

  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)
  user_id String

  profile         ChurchProfile?
  contact_details ChurchContact?
  pastor_details  Pastor?
  church_map      ChurchMap?
  church_media    ChurchMedia?

  steps_completed String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChurchProfile {
  id                  String  @id @default(cuid())
  mission             String?
  vision              String?
  church_size         Int
  communion_frequency String

  church    Church @relation(fields: [church_id], references: [id], onDelete: Cascade)
  church_id String @unique

  services        Json[]
  ministries      Json[]
  public_services Json[]
  confessions     Json[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ChurchContact {
  id      String  @id @default(cuid())
  email   String
  website String?

  contact_numbers Json[]
  social_links    Json[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  church    Church @relation(fields: [church_id], references: [id], onDelete: Cascade)
  church_id String @unique
}

model Pastor {
  id    String  @id @default(cuid())
  photo String?
  name  String
  bio   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  church    Church @relation(fields: [church_id], references: [id], onDelete: Cascade)
  church_id String @unique
}

model ChurchMap {
  id        String @id @default(cuid())
  landmarks Json[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  church    Church @relation(fields: [church_id], references: [id], onDelete: Cascade)
  church_id String @unique
}

model ChurchMedia {
  id               String  @id @default(cuid())
  gallery          Json[]
  intro_video_link String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  church    Church @relation(fields: [church_id], references: [id], onDelete: Cascade)
  church_id String @unique
}
